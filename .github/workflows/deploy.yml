name: Deploy DAMAP

on:
  push: {}
  workflow_dispatch: {}


jobs:
  build:
    name: Build DAMAP
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.get_environment_from_git_ref.outputs.environment }}
      environment_short: ${{ steps.get_environment_from_git_ref.outputs.environment_short }}
      registry_root: ghcr.io/${{ github.repository }}/
      submodules: "true"
    steps:
    - name: Get environment from git ref
      id: get_environment_from_git_ref
      run: "echo \"Running on branch ${{ github.ref_name }}\"\nif [ \"${{ github.ref }}\" = \"refs/heads/main\" ]; then\n  echo \"environment=main\"\n  echo \"environment=main\" >> $GITHUB_OUTPUT\n  echo \"environment_short=main\" >> $GITHUB_OUTPUT\nelse\n  echo \"environment=${{ github.ref_name }}\"\n  echo \"environment=${{ github.ref_name }}\" >> $GITHUB_OUTPUT\n  echo \"environment_short=$(echo -n ${{ github.ref_name }} | sed 's/feat\\(ure\\)\\{0,1\\}[_/]//' | tr '_' '-' | tr '[:upper:]' '[:lower:]' )\" >> $GITHUB_OUTPUT\nfi    \n"
    - name: Checkout
      uses: actions/checkout@v4
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Create tags based on git data
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/${{ github.repository }}/damap-backend }}
    - name: Create build environment
      env:
        SECRETS_CONTEXT: ${{ toJson(secrets) }}
        VARS_CONTEXT: ${{ toJson(vars) }}
      run: |
        git clone --depth 1 --branch ${{ vars.DAMAP_BE_TAG }} https://github.com/tuwien-csd/damap-backend.git
        sed -i -e "s|env: DEV|env: PROD|g" damap-backend/src/main/resources/application.yaml
        sed -i -e "s|origins: http://localhost:8085|origins: ${{ vars.DAMAP_BE_ORIGINS }}|g" damap-backend/src/main/resources/application.yaml
        sed -i -e "s|url: http://keycloak:8080/auth/realms/damap|url: ${{ vars.DAMAP_BE_URL }}|g" damap-backend/src/main/resources/application.yaml
        sed -i -e "s|url: http://localhost:8087/auth/realms/damap|url: ${{ vars.DAMAP_BE_URL }}|g" damap-backend/src/main/resources/application.yaml
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: damap-backend/.
        platforms: linux/amd64
        push: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    environment: ${{ github.ref_name }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Kubernetes credentials
      run: |
        mkdir ${HOME}/.kube
        echo ${{ secrets.C2_KUBE_CONFIG }} | base64 --decode > ${HOME}/.kube/config
        chmod 0600 ${HOME}/.kube/config
        KUBE_NAMESPACE="${{ secrets.KUBE_NAMESPACE }}"
        echo "KUBE_NAMESPACE=$KUBE_NAMESPACE" >> $GITHUB_ENV
        kubectl config set-context --current --namespace=${{ secrets.KUBE_NAMESPACE }}
        kubectl get pod
    - name: Set environment variables
      env:
        SECRETS_CONTEXT: ${{ toJson(secrets) }}
        VARS_CONTEXT: ${{ toJson(vars) }}
      run: |
        cat > secrets.yaml <<EOF
        apiVersion: v1
        kind: Secret
        metadata:
            name: ${{ github.ref_name }}
        type: Opaque
        data:
        EOF
        k8s_secrets=$(echo -n "$SECRETS_CONTEXT" | jq -r '[to_entries[]|select(.key|startswith("K8S_SECRET_"))]|map("  \(.key|sub("K8S_SECRET_"; "")): \(.value|tostring|@base64)")|.[]')
        if [ "$k8s_secrets"x == 'x' ]
        then echo ' {}' >> secrets.yaml
        else echo "$k8s_secrets" >> secrets.yaml
        fi
        kubectl replace -f secrets.yaml -n "${{ vars.KUBE_NAMESPACE }}" --force
        rm secrets.yaml
    - name: Clean
      run: |
        echo "Delete previous ConfigMaps"
        kubectl -n damap delete configmap api-mock-config
        kubectl -n damap delete configmap nginx-config
        kubectl -n damap delete configmap sample-damap-realm-export
    - name: Deploy
      env:
        SECRETS_CONTEXT: ${{ toJson(secrets) }}
        VARS_CONTEXT: ${{ toJson(vars) }}
      run: |
        echo "Create ConfigMaps from the configuration files"
        kubectl -n damap create configmap api-mock-config --from-file=./config/api-mock/data/
        kubectl -n damap create configmap nginx-config --from-file=./config/nginx.conf    
        kubectl -n damap create configmap sample-damap-realm-export --from-file=./config/sample-damap-realm-export.json     
        echo "Introduce env variable related to the branch ${{ github.ref_name }}"     
        sed -i -e "s|damap_be_service_id|${{ vars.DAMAP_BE_SERVICE_ID }}|g" Kubernetes/damap-be.yaml
        sed -i -e "s|damap_fe_service_id|${{ vars.DAMAP_FE_SERVICE_ID }}|g" Kubernetes/damap-fe.yaml
        sed -i -e "s|proxy_public_url|${{ secrets.K8S_SECRET_PUBLIC_URL }}|g" Kubernetes/proxy.yaml
        sed -i -e "s|proxy_service_id|${{ vars.PROXY_SERVICE_ID }}|g" Kubernetes/proxy.yaml
        sed -i -e "s|https://||g" Kubernetes/proxy.yaml
        sed -i -e "s|api_mock_service_id|${{ vars.API_MOCK_SERVICE_ID }}|g" Kubernetes/api-mock.yaml
        sed -i -e "s|fits_service_service_id|${{ vars.FITS_SERVICE_ID }}|g" Kubernetes/fits-service.yaml
        sed -i -e "s|keycloak_service_service_id|${{ vars.KEYCLOAK_SERVICE_ID }}|g" Kubernetes/keycloak.yaml
        sed -i -e "s|keycloak_db_service_service_id|${{ vars.KEYCLOAK_DB_SERVICE_ID }}|g" Kubernetes/keycloak-db.yaml
        sed -i -e "s|damap_db_service_service_id|${{ vars.DAMAP_DB_SERVICE_ID }}|g" Kubernetes/damap-db.yaml
        sed -i -e "s|damap_be_secrets|main|g" Kubernetes/damap-be.yaml
        echo "Deploying from the branch ${{ github.ref_name }}" 
        kubectl -n "${{ vars.KUBE_NAMESPACE }}" apply -f Kubernetes/
